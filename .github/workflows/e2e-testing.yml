name: End to End Testing

on:
  workflow_dispatch:
    inputs:
      environment:
        description: AZD Environment Name
        type: string
        default: fllm-e2e-aca
      deployOpenAi:
        description: Deploy a new OpenAI Instance
        type: boolean
        default: false
      openAiName:
        description: Shared OpenAI Instance Name
        type: string
        default: fllm-01
      openAiResourceGroup:
        description: Shared OpenAI Resource Group
        type: string
        default: fllm-shared-01
      location:
        description: AZD Target Location
        type: choice
        options:
        - AustraliaEast
        - CanadaEast
        - EastUS
        - EastUS2
        - SwedenCentral
        default: EastUS2
      enableTeardown:
        description: Enable teardown of environment
        type: boolean
        default: true
      target:
        description: Select target tenant/subscription
        type: choice
        options:
        - sandbox
        - e2e
        default: e2e

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.set-registry.outputs.result }}
      service_matrix: ${{ steps.set-service-matrix.outputs.result }}
      test_matrix: ${{ steps.set-test-matrix.outputs.result }}
      docker_tag: ${{ steps.docker-tag.outputs.docker_tag }}
      unique_id: ${{ steps.set-unique-id.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Unique ID
      uses: pplanel/hash-calculator-action@v1.3.1
      id: set-unique-id
      with:
        input: ${{ inputs.environment }}
        method: SHA3
        output_len: 32

    - name: Set Service Matrix
      uses: actions/github-script@v7
      id: set-service-matrix
      with:
        result-encoding: string
        script: |
          const fs = require('fs')
          const jsonString = fs.readFileSync('./tests/config/${{ inputs.target }}-test-manifest.json')
          var data = JSON.parse(jsonString)
          return JSON.stringify(data.service_matrix)
    
    - name: Set Test Matrix
      uses: actions/github-script@v7
      id: set-test-matrix
      with:
        result-encoding: string
        script: |
          const fs = require('fs')
          const jsonString = fs.readFileSync('./tests/config/${{ inputs.target }}-test-manifest.json')
          var data = JSON.parse(jsonString)
          return JSON.stringify(data.test_matrix)
    
    - name: Set Container registry
      uses: actions/github-script@v7
      id: set-registry
      with:
        result-encoding: string
        script: |
          const fs = require('fs')
          const jsonString = fs.readFileSync('./tests/config/${{ inputs.target }}-test-manifest.json')
          var data = JSON.parse(jsonString)
          return data.registry

    - name: Set Git and Helm Tag
      id: docker-tag
      run: |
        DOCKER_TAG=$(echo ${{ github.ref_name }} |  cut -d'/' -f 2)
        DOCKER_TAG=$DOCKER_TAG-$(date +'%Y%m%dT%H%M%SZ')
        echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
        echo "docker_tag: Latest Tag is : $DOCKER_TAG"
        echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT      

  helm_build:
    name: Package Helm Charts
    if: startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/poc/')
    needs: generate_matrix
    strategy:
      fail-fast: false
      matrix:
        object: ${{ fromJson(needs.generate_matrix.outputs.service_matrix) }}
    uses: ./.github/workflows/build-helm-chart.yml
    with:
      chart: ${{ matrix.object.name }}
      registry: ${{ needs.generate_matrix.outputs.registry }}
      tag: ${{ needs.generate_matrix.outputs.docker_tag }}
      username: ${{ (inputs.target == 'sandbox') ?? secrets.FLLM_ACR_USERNAME || secrets.FLLM_E2E_ACR_USERNAME }}
      password: ${{ (inputs.target == 'sandbox') ?? secrets.FLLM_ACR_PASSWORD || secrets.FLLM_E2E_ACR_PASSWORD }}

  docker_build:
    name: Build Docker Images
    if: startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/poc/')
    needs: generate_matrix
    strategy:
      fail-fast: false
      matrix:
        object: ${{ fromJson(needs.generate_matrix.outputs.service_matrix) }}
    uses: ./.github/workflows/build-docker-image.yml
    with:
      image: ${{ matrix.object.name }}
      context: ${{ matrix.object.context }}
      dockerfile: ${{ matrix.object.dockerfile }}
      registry: ${{ needs.generate_matrix.outputs.registry }}
      tag: ${{ needs.generate_matrix.outputs.docker_tag }}
      username: ${{ (inputs.target == 'sandbox') && secrets.FLLM_ACR_USERNAME || secrets.FLLM_E2E_ACR_USERNAME }}
      password: ${{ (inputs.target == 'sandbox') && secrets.FLLM_ACR_PASSWORD || secrets.FLLM_E2E_ACR_PASSWORD }}

  deploy_quickstart:
    name: Deploy Quick Start
    if: startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/poc/')
    runs-on: ubuntu-latest
    env:
      AZURE_ENV_NAME: ${{ inputs.environment }}
      AZURE_LOCATION: ${{ inputs.location }}
    needs: [generate_matrix, docker_build]
    steps:
    - name: Sets Credentials for E2E
      run: |
        {
          echo 'AZURE_CREDENTIALS<<EOF'
          echo "$FLLM_E2E_AZURE_CREDENTIALS"
          echo EOF
        } >> "$GITHUB_ENV"
      if: inputs.target == 'e2e'
      env:
        FLLM_E2E_AZURE_CREDENTIALS: |
          ${{ secrets.FLLM_E2E_AZURE_CREDENTIALS }}
    
    - name: Sets Credentials for Sandbox
      run: |
        {
          echo 'AZURE_CREDENTIALS<<EOF'
          echo "$FLLM_SBX_AZURE_CREDENTIALS"
          echo EOF
        } >> "$GITHUB_ENV"
      if: inputs.target == 'sandbox'
      env:
        FLLM_SBX_AZURE_CREDENTIALS: |
          ${{ secrets.FLLM_SBX_AZURE_CREDENTIALS }}

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install azd
      uses: Azure/setup-azd@v1.0.0
      with:
        version: '1.9.1'

    - name: Log in with Azure (Client Credentials)
      run: |
        $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        Write-Host "::add-mask::$($info.clientSecret)"

        cd ./deploy/quick-start
        azd auth login `
          --client-id "$($info.clientId)" `
          --client-secret "$($info.clientSecret)" `
          --tenant-id "$($info.tenantId)"

        az login `
          --service-principal `
          --username "$($info.clientId)" `
          --password "$($info.clientSecret)" `
          --tenant "$($info.tenantId)"

        $env:AZCOPY_SPA_CLIENT_SECRET="$($info.clientSecret)"
        azcopy login `
          --service-principal `
          --application-id "$($info.clientId)" `
          --tenant-id "$($info.tenantId)"
      shell: pwsh

    - name: Provision App Registrations
      id: provision-app-registrations
      run: |
        Write-Host "Provision App Registrations"  
        Push-Location ./tests/scripts
        ./Create-FllmEntraIdApps.ps1 `
          -authAppName FoundationaLLM-Authorization-E2E-${{ needs.generate_matrix.outputs.unique_id }} `
          -coreAppName FoundationaLLM-Core-E2E-${{ needs.generate_matrix.outputs.unique_id }} `
          -coreClientAppName FoundationaLLM-Core-E2E-Client-${{ needs.generate_matrix.outputs.unique_id }} `
          -mgmtAppName FoundationaLLM-Management-E2E-${{ needs.generate_matrix.outputs.unique_id }} `
          -mgmtClientAppName FoundationaLLM-Management-E2E-Client-${{ needs.generate_matrix.outputs.unique_id }}
        Pop-Location
      shell: pwsh

    - name: Provision Admin Group
      id: provision-admin-group
      run: |
        $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        Write-Host "::add-mask::$($info.clientSecret)"

        Write-Host "Provision Admin Group and add ObjectId to AZD Environment"
        Push-Location ./tests/scripts
        $spObjectId = $(az ad sp list --filter "appId eq '$($info.clientId)'" --query '[].id' --output tsv)
        Write-Host "SP Object Id: $spObjectId"
        ./Create-FllmAdminGroup.ps1 `
          -groupName FLLM-E2E-Admins-${{ needs.generate_matrix.outputs.unique_id }} `
          -spObjectId $spObjectId

        if ('${{ inputs.target }}' -eq 'sandbox') {
          ./Create-FllmAdminGroup.ps1 `
            -groupName FLLM-E2E-Admins-${{ needs.generate_matrix.outputs.unique_id }} `
            -spObjectId d3bd4e8e-d413-477d-a420-0792b0504adf
        }
        Pop-Location
      shell: pwsh

    - name: Update AZD Environment
      id: update-azd-environment
      run: |
        $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        Write-Host "::add-mask::$($info.clientSecret)"

        Write-Host "Create new AZD Environment"
        Push-Location ./deploy/quick-start
        azd env new ${{ inputs.environment }}
        azd env set PIPELINE_DEPLOY "$true"

        if (${{ inputs.deployOpenAi }}) {
          azd env set OPENAI_NAME ${{ inputs.openAiName }}
          azd env set OPENAI_RESOURCE_GROUP ${{ inputs.openAiResourceGroup }}
          azd env set OPENAI_SUBSCRIPTION_ID $($info.subscriptionId)
        }
        
        Pop-Location

        Write-Host "Update AZD Environment with Service Docker Image Names"
        $configPath = "./tests/config/${{ inputs.target }}-test-manifest.json"
        $config = Get-content $configPath | ConvertFrom-Json

        Push-Location ./deploy/quick-start
        foreach ($service in $($config.service_matrix)) {
          $imageName = "$($config.registry)/$($service.name):${{ needs.generate_matrix.outputs.docker_tag }}"
          Write-Host "Setting $($service.azd_env_key) to $($imageName)..."
          azd env set $($service.azd_env_key) "$($imageName)"

          if ($LASTEXITCODE -ne 0) {
              Write-Error("Failed to set $($value.Key).")
              exit 1
          }
        }
        Pop-Location

        Write-Host "Update AZD Environment with App Registration Metadata"
        Push-Location ./deploy/quick-start
        ../../tests/scripts/Set-AzdEnv.ps1 `
          -tenantId $($info.tenantId) `
          -principalType ServicePrincipal `
          -instanceId 6fa496ce-d5c0-4e02-9223-06a98c9c0176 `
          -fllmApiName FoundationaLLM-Core-E2E-${{ needs.generate_matrix.outputs.unique_id }} `
          -fllmClientName FoundationaLLM-Core-E2E-Client-${{ needs.generate_matrix.outputs.unique_id }} `
          -fllmMgmtApiName FoundationaLLM-Management-E2E-${{ needs.generate_matrix.outputs.unique_id }} `
          -fllmMgmtClientName FoundationaLLM-Management-E2E-Client-${{ needs.generate_matrix.outputs.unique_id }} `
          -fllmAuthApiName FoundationaLLM-Authorization-E2E-${{ needs.generate_matrix.outputs.unique_id }} `
          -fllmAdminGroupName FLLM-E2E-Admins-${{ needs.generate_matrix.outputs.unique_id }}
        Pop-Location
      shell: pwsh

    - name: Provision Infrastructure
      run: |
        $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        Write-Host "::add-mask::$($info.clientSecret)"

        $env:AZURE_SUBSCRIPTION_ID=$($info.subscriptionId)

        Push-Location ./deploy/quick-start
        azd provision --no-prompt
        Pop-Location
      shell: pwsh

    - name: Deploy Application
      run: |
        $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        Write-Host "::add-mask::$($info.clientSecret)"

        $env:AZURE_SUBSCRIPTION_ID=$($info.subscriptionId)

        Push-Location ./deploy/quick-start
        azd deploy --no-prompt
        Pop-Location
      shell: pwsh
    
    - name: Update App Registration OAuth Callbacks
      id: update-app-reg-oauth
      run: |
        Write-Host "Update App Registration OAuth Callbacks"
        Push-Location ./deploy/quick-start
        pwsh -File ../../tests/scripts/Update-OAuthCallbackUris.ps1 `
          -fllmChatUiName FoundationaLLM-Core-E2E-Client-${{ needs.generate_matrix.outputs.unique_id }} `
          -fllmMgmtUiName FoundationaLLM-Management-E2E-Client-${{ needs.generate_matrix.outputs.unique_id }}
        Pop-Location
      shell: pwsh

    - name: Apply MS Graph API Role Assignments
      id: apply-ms-graph-api-roles
      run: |
        Write-Host "Apply MS Graph API Role Assignments"
        Push-Location ./deploy/quick-start
        pwsh -File ../../tests/scripts/Apply-MSGraphAPIRoles.ps1
        Pop-Location
      shell: pwsh

    - name: Apply Cosmos DB RBAC to Service Principal
      id: apply-cosmos-db-rbac
      run: |
        $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        Write-Host "::add-mask::$($info.clientSecret)"

        Push-Location ./deploy/quick-start
        (azd env get-values) | foreach {
            $name, $value = $_.split('=')
            set-content env:\$name $value
        }
        Pop-Location

        Write-Host "Apply Cosmos DB Role to Service Principal"
        Push-Location ./tests/scripts
        $spObjectId = $(az ad sp list --filter "appId eq '$($info.clientId)'" --query '[].id' --output tsv)
        Write-Host "SP Object Id: $spObjectId"
        $cosmosDbName = $env:AZURE_COSMOS_DB_NAME | ConvertFrom-Json
        $cosmosDbObjectId = $(az cosmosdb show --name $cosmosDbName --resource-group rg-${{ inputs.environment }} --query 'id' --output tsv)
        Write-Host "CosmosDB Object Id: $cosmosDbObjectId"
        az cosmosdb sql role assignment create `
          --account-name $cosmosDbName `
          --resource-group rg-${{ inputs.environment }} `
          --role-definition-id 00000000-0000-0000-0000-000000000002 `
          --scope $cosmosDbObjectId `
          --principal-id $spObjectId
        Pop-Location
      shell: pwsh

  run_e2e_tests:
    name: Run End to End Tests
    if: startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/poc/')
    continue-on-error: true
    runs-on: ubuntu-latest
    env:
      AZURE_ENV_NAME: ${{ inputs.environment }}
      AZURE_LOCATION: ${{ inputs.location }}
    needs: [generate_matrix,deploy_quickstart]
    strategy:
      fail-fast: false
      matrix:
        object: ${{ fromJson(needs.generate_matrix.outputs.test_matrix) }}
    steps:
    - name: Sets Credentials for E2E
      run: |
        {
          echo 'AZURE_CREDENTIALS<<EOF'
          echo "$FLLM_E2E_AZURE_CREDENTIALS"
          echo EOF
        } >> "$GITHUB_ENV"
      if: inputs.target == 'e2e'
      env:
        FLLM_E2E_AZURE_CREDENTIALS: |
          ${{ secrets.FLLM_E2E_AZURE_CREDENTIALS }}
    
    - name: Sets Credentials for Sandbox
      run: |
        {
          echo 'AZURE_CREDENTIALS<<EOF'
          echo "$FLLM_SBX_AZURE_CREDENTIALS"
          echo EOF
        } >> "$GITHUB_ENV"
      if: inputs.target == 'sandbox'
      env:
        FLLM_SBX_AZURE_CREDENTIALS: |
          ${{ secrets.FLLM_SBX_AZURE_CREDENTIALS }}
      
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install azd
      uses: Azure/setup-azd@v1.0.0
      with:
        version: '1.9.1'

    - name: Log in with Azure (Client Credentials)
      run: |
        $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        Write-Host "::add-mask::$($info.clientSecret)"

        Push-Location ./deploy/quick-start
        azd auth login `
          --client-id "$($info.clientId)" `
          --client-secret "$($info.clientSecret)" `
          --tenant-id "$($info.tenantId)"
        Pop-Location

        az login `
          --service-principal `
          --username "$($info.clientId)" `
          --password "$($info.clientSecret)" `
          --tenant "$($info.tenantId)" `
          --scope api://FoundationaLLM-Core-E2E-${{ needs.generate_matrix.outputs.unique_id }}/.default
      shell: pwsh

    - name: Running End to End Tests
      id: e2e-test-exec
      run: |
        $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        Write-Host "::add-mask::$($info.clientSecret)"

        Write-Host "Create new AZD Environment"
        Push-Location ./deploy/quick-start
        azd env new ${{ inputs.environment }}
        azd env set AZURE_SUBSCRIPTION_ID $($info.subscriptionId)
        azd env set PIPELINE_DEPLOY "$true"
        Pop-Location

        Push-Location ./deploy/quick-start
        ../../tests/scripts/Set-AzdEnv.ps1 `
          -tenantId $($info.tenantId) `
          -principalType ServicePrincipal `
          -instanceId 6fa496ce-d5c0-4e02-9223-06a98c9c0176

        azd env refresh --no-prompt

        (azd env get-values) | foreach {
            $name, $value = $_.split('=')
            set-content env:\$name $value
        }
        Pop-Location

        $connectionString = $(az appconfig credential list `
          --name $($env:AZURE_APP_CONFIG_NAME | ConvertFrom-Json) `
          --resource-group rg-$($env:AZURE_ENV_NAME) `
          --query "[].{name:name,connectionString:connectionString}[?name=='Primary Read Only'].connectionString" `
          --output tsv)
        $env:FoundationaLLM_AppConfig_ConnectionString=$connectionString

        echo "Running End to End Test: ${{ matrix.object.name }}"
        dotnet test --filter "FullyQualifiedName=${{ matrix.object.namespace }}.${{ matrix.object.task_name }}" ${{ matrix.object.target }}
      shell: pwsh

  teardown_quickstart:
    name: Tear Down Quick Start
    if: inputs.enableTeardown && (startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/poc/'))
    runs-on: ubuntu-latest
    env:
      AZURE_ENV_NAME: ${{ inputs.environment }}
      AZURE_LOCATION: ${{ inputs.location }}
    needs: [generate_matrix,deploy_quickstart,run_e2e_tests]
    steps:
    - name: Sets Credentials for E2E
      run: |
        {
          echo 'AZURE_CREDENTIALS<<EOF'
          echo "$FLLM_E2E_AZURE_CREDENTIALS"
          echo EOF
        } >> "$GITHUB_ENV"
      if: inputs.target == 'e2e'
      env:
        FLLM_E2E_AZURE_CREDENTIALS: |
          ${{ secrets.FLLM_E2E_AZURE_CREDENTIALS }}
    
    - name: Sets Credentials for Sandbox
      run: |
        {
          echo 'AZURE_CREDENTIALS<<EOF'
          echo "$FLLM_SBX_AZURE_CREDENTIALS"
          echo EOF
        } >> "$GITHUB_ENV"
      if: inputs.target == 'sandbox'
      env:
        FLLM_SBX_AZURE_CREDENTIALS: |
          ${{ secrets.FLLM_SBX_AZURE_CREDENTIALS }}
  
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install azd
      uses: Azure/setup-azd@v1.0.0
      with:
        version: '1.9.1'

    - name: Log in with Azure (Client Credentials)
      run: |
        $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        Write-Host "::add-mask::$($info.clientSecret)"

        cd ./deploy/quick-start
        azd auth login `
          --client-id "$($info.clientId)" `
          --client-secret "$($info.clientSecret)" `
          --tenant-id "$($info.tenantId)"

        az login `
          --service-principal `
          --username "$($info.clientId)" `
          --password "$($info.clientSecret)" `
          --tenant "$($info.tenantId)"
      shell: pwsh

    - name: Tearing Down AZD Deployment
      id: azd-down
      run: |
        $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        Write-Host "::add-mask::$($info.clientSecret)"

        Write-Host "Create new AZD Environment"
        Push-Location ./deploy/quick-start
        azd env new ${{ inputs.environment }}
        azd env set AZURE_SUBSCRIPTION_ID $($info.subscriptionId)
        azd env set PIPELINE_DEPLOY "$true"
        Pop-Location

        Push-Location ./deploy/quick-start
        ../../tests/scripts/Set-AzdEnv.ps1 `
          -tenantId $($info.tenantId) `
          -principalType ServicePrincipal `
          -instanceId 6fa496ce-d5c0-4e02-9223-06a98c9c0176

        azd env refresh --no-prompt
        azd down --force --purge --no-prompt
        Pop-Location

        Write-Host "Tear down App Registrations"
        Push-Location ./tests/scripts
        ./Remove-EntraIdApps.ps1 `
          -authAppName FoundationaLLM-Authorization-E2E-${{ needs.generate_matrix.outputs.unique_id }} `
          -coreAppName FoundationaLLM-Core-E2E-${{ needs.generate_matrix.outputs.unique_id }} `
          -coreClientAppName FoundationaLLM-Core-E2E-Client-${{ needs.generate_matrix.outputs.unique_id }} `
          -mgmtAppName FoundationaLLM-Management-E2E-${{ needs.generate_matrix.outputs.unique_id }} `
          -mgmtClientAppName FoundationaLLM-Management-E2E-Client-${{ needs.generate_matrix.outputs.unique_id }} `
          -interactiveMode $false
        Pop-Location
      shell: pwsh
